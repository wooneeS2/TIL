{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gim-wonhui/Desktop/project/personal/TIL/next.js/next-udemy/section5/pages/[pid].js\";\nimport fs from 'fs/promises';\nimport path from 'path';\n\nfunction ProductDetailPage(props) {\n  const {\n    loadedProduct\n  } = props;\n\n  if (!loadedProduct) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 16\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: loadedProduct.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: loadedProduct.description\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n} //컴포넌트 함수보다 빨리 실행됨\n\n\nexport async function getStaticProps(context) {\n  const {\n    params\n  } = context;\n  const productId = params.pid;\n  const filePath = path.join(process.cwd(), 'data', 'dummy-backend.json');\n  const jsonData = await fs.readFile(filePath);\n  const data = JSON.parse(jsonData);\n  const product = data.products.find(product => product.id === product.id);\n  return {\n    props: {\n      loadedProduct: product\n    }\n  };\n} //정적으로 데이터 페칭할 때 미리 데이터 어떤 데이터를 가져와야하는지 알려주는 함수\n\nexport async function getStaticPaths() {\n  return {\n    paths: [{\n      params: {\n        pid: 'p1'\n      }\n    }],\n    // true일 경우 Paths에 없는 값은 요청이 도달했을 때 생김\n    //string일 경우에는 값이 로딩 된 다음에 로딩됨.\n    fallback: true\n  };\n}\nexport default ProductDetailPage;","map":{"version":3,"sources":["/Users/gim-wonhui/Desktop/project/personal/TIL/next.js/next-udemy/section5/pages/[pid].js"],"names":["fs","path","ProductDetailPage","props","loadedProduct","title","description","getStaticProps","context","params","productId","pid","filePath","join","process","cwd","jsonData","readFile","data","JSON","parse","product","products","find","id","getStaticPaths","paths","fallback"],"mappings":";;;AAAA,OAAOA,EAAP,MAAe,aAAf;AACA,OAAOC,IAAP,MAAiB,MAAjB;;AAEA,SAASC,iBAAT,CAA2BC,KAA3B,EAAkC;AAC9B,QAAM;AAAEC,IAAAA;AAAF,MAAoBD,KAA1B;;AACA,MAAI,CAACC,aAAL,EAAoB;AAChB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AACD,sBACI;AAAA,4BACI;AAAA,gBAAKA,aAAa,CAACC;AAAnB;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA,gBAAID,aAAa,CAACE;AAAlB;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA,kBADJ;AAMH,C,CAED;;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC1C,QAAM;AAAEC,IAAAA;AAAF,MAAaD,OAAnB;AACA,QAAME,SAAS,GAAGD,MAAM,CAACE,GAAzB;AAEA,QAAMC,QAAQ,GAAGX,IAAI,CAACY,IAAL,CAAUC,OAAO,CAACC,GAAR,EAAV,EAAyB,MAAzB,EAAiC,oBAAjC,CAAjB;AACA,QAAMC,QAAQ,GAAG,MAAMhB,EAAE,CAACiB,QAAH,CAAYL,QAAZ,CAAvB;AACA,QAAMM,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,QAAX,CAAb;AAEA,QAAMK,OAAO,GAAGH,IAAI,CAACI,QAAL,CAAcC,IAAd,CAAmBF,OAAO,IAAIA,OAAO,CAACG,EAAR,KAAeH,OAAO,CAACG,EAArD,CAAhB;AAEA,SAAO;AACHrB,IAAAA,KAAK,EAAE;AACHC,MAAAA,aAAa,EAAEiB;AADZ;AADJ,GAAP;AAKH,C,CAED;;AACA,OAAO,eAAeI,cAAf,GAAgC;AACnC,SAAO;AACHC,IAAAA,KAAK,EAAE,CAAC;AAAEjB,MAAAA,MAAM,EAAE;AAAEE,QAAAA,GAAG,EAAE;AAAP;AAAV,KAAD,CADJ;AAEH;AACA;AACAgB,IAAAA,QAAQ,EAAE;AAJP,GAAP;AAMH;AAED,eAAezB,iBAAf","sourcesContent":["import fs from 'fs/promises';\nimport path from 'path';\n\nfunction ProductDetailPage(props) {\n    const { loadedProduct } = props;\n    if (!loadedProduct) {\n        return <p>Loading...</p>;\n    }\n    return (\n        <>\n            <h1>{loadedProduct.title}</h1>\n            <p>{loadedProduct.description}</p>\n        </>\n    );\n}\n\n//컴포넌트 함수보다 빨리 실행됨\nexport async function getStaticProps(context) {\n    const { params } = context;\n    const productId = params.pid;\n\n    const filePath = path.join(process.cwd(), 'data', 'dummy-backend.json');\n    const jsonData = await fs.readFile(filePath);\n    const data = JSON.parse(jsonData);\n\n    const product = data.products.find(product => product.id === product.id);\n\n    return {\n        props: {\n            loadedProduct: product,\n        },\n    };\n}\n\n//정적으로 데이터 페칭할 때 미리 데이터 어떤 데이터를 가져와야하는지 알려주는 함수\nexport async function getStaticPaths() {\n    return {\n        paths: [{ params: { pid: 'p1' } }],\n        // true일 경우 Paths에 없는 값은 요청이 도달했을 때 생김\n        //string일 경우에는 값이 로딩 된 다음에 로딩됨.\n        fallback: true,\n    };\n}\n\nexport default ProductDetailPage;\n"]},"metadata":{},"sourceType":"module"}